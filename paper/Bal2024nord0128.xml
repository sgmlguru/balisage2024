<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="balisage-1-5.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<article xmlns="http://docbook.org/ns/docbook">
    <title>Adventures in Mainframes, Text-based Messaging, and iXML</title>
    <info>
        <abstract>
            <para>When pointy brackets still meant SGML, an aerospace working group produced a
                text-based messaging specification, S2000M Issue 2.1, intended in parts for hardware
                up to twice its age. While the current version of that specification prescribes XML,
                the old one, a mystifying mix of compact syntax and semantics, is not about to go
                away anytime soon, even though the hardware is. Change in the aerospace industry is
                often driven not by technological breakthroughs but necessity; in this case a trusty
                old mainframe computer about to be decommissioned and there being no time to move to
                the 21st century in an orderly fashion.</para>
            <para>This, then, is the story of that old text-based format and the necessity of
                keeping it around by introducing a more modern approach.</para>
        </abstract>
        <author>
            <personname>
                <firstname>Ari</firstname>
                <surname>Nordström</surname>
            </personname>
            <personblurb>
                <para>Ari is an independent markup geek based in Göteborg, Sweden. He has provided
                    angled brackets to many organisations and companies across a number of borders
                    over the years, some of which deliver the rule of law, help dairy farmers make a
                    living, and assist in servicing commercial aircraft. And others are just for
                    fun.</para>
                <para>Ari is the proud owner and head projectionist of Western Sweden's last
                    functioning 35/70mm cinema, situated in his garage, which should explain why he
                    once wrote a paper on automating commercial cinemas using XML.</para>
            </personblurb>
        </author>
    </info>
    <section>
        <title>The S-series and a Text-based Messaging Standard</title>
        <para>When pointy brackets still meant SGML and limitations in computing power resulted in
            short and cryptic element names, military and civil aircraft manufacturers keen on
            leveraging the power of markup formed working groups tasked with defining specifications
            intended to standardise aerospace information management. These specifications, today
            known as <emphasis>the S series</emphasis>, included everything from technical
            documentation to logistics and messaging.</para>
        <section>
            <title>S1000D</title>
            <para>The technical documentation specification — maintenance procedures, parts data,
                wiring, etc — is called S1000D [<xref xmlns:xlink="http://www.w3.org/1999/xlink"
                    linkend="s1000d-specs"/>]. The first version in widespread use, <emphasis>Issue
                    1.7</emphasis>, was as a set of SGML DTDs alongside a hefty document describing
                exactly how to use those DTDs and how to organise the resulting publications.</para>
            <para>S1000D has since added support for land and sea vehicles, and moved to XML,
                dropping DTDs in favour of XML Schemas. The current specification, <emphasis>Issue
                    5.0</emphasis>, is twice the size of Issue 1.7.</para>
        </section>
        <section>
            <title>S2000M</title>
            <para>The messaging specification, S2000M, <quote>defines the processes, procedures and
                    provides the information for data exchange to be used for material management
                    throughout the lifecycle of a Product.</quote> Unlike S1000D, the first released
                version, <emphasis>Issue 2.1</emphasis> more than 30 years ago, chose not to use
                SGML and instead provided a text-based format. That format was kept very, very
                compact to save on that precious computing power, because while the spec is more
                than 30 years old today, the equipment it was meant to be used on could be closer to
                30 years old back then.</para>
            <para>Of course, S2000M in its latest incarnation, <emphasis>Issue 7.0</emphasis>, is
                XML, and it, too, is governed by a set of XML Schemas.</para>
        </section>
        <section>
            <title>The Context</title>
            <para>Before we dive head first into a 30-year old text format, a few words about the
                context in which all this happens may prove helpful and address some of the more
                obvious questions you may have (such as <quote>why, oh why?</quote> or <quote>but
                    couldn't you just...?</quote>).</para>
            <para>The products described and updated using the S-series of specifications have
                lifespans of several decades. For example, a jet engine manufactured by a client of
                the author first flew in the 60s and has been serviced, maintained, and updated ever
                since. The technical publications for it have had to live for as long — and need to
                be available for several years after the last of those engines has been
                retired.</para>
            <para>Obviously, the lifespans alone make a good case for markup, but it's
                    <emphasis>complicated</emphasis>. The <emphasis>Illustrated Parts Data
                    (IPD)</emphasis> for that 60s engine started out in a proprietary text-based
                format in a mainframe computer, and while much of the documentation is now provided
                in SGML and XML formats, depending on the receiver, that mainframe is still in use
                and outputs that text-based format, even though the downstream processes have been
                updated multiple times.</para>
            <para>The industry can be surprisingly conservative, partly because the documentation
                really does need to live for that long, and partly because if you want to keep the
                planes in the air, making sure the spare parts information remains available is
                paramount. In other words, an old text format producing IPD pages and another
                describing IPD messages can be very, very resilient.</para>
            <para>In fact, some companies may go about their business day in and day out, producing
                new engine families, models, and variants, keeping the engines flying and in good
                shape while knowing that yes, they should replace that mainframe. They really
                should, but they don't.</para>
            <para>Until one day, the decision is made to tear down the building in which the
                mainframe lives.</para>
        </section>
    </section>
    <section>
        <title>A 30-Year Old Text Format</title>
        <para>The S2000M 2.1 specification [<xref xmlns:xlink="http://www.w3.org/1999/xlink"
                linkend="s2000m-2.1-spec"/>] is 1739 pages. and hardly light bedtime reading, but
            once you understand the general idea, namely to exchange parts information during the
            lifecycle of a product, it is quite useful.</para>
        <para>Much of it describes formal requirements such as how to identify and locate a part,
            how to provision a new part, how to provide observations regarding the data from a
            contractor to a customer, and so on, but a significant portion deals with the specifics
            of the text format describing the messages themselves, including data dictionaries
            covering all aspects of the format.</para>
        <para>There are several types of messages:</para>
        <itemizedlist>
            <listitem>
                <para>Provisioning data; this is split into multiple message types depending on how
                    the parts are identified, and how the parts data is updated and corrected</para>
            </listitem>
            <listitem>
                <para>Observations and customer-provided data</para>
            </listitem>
            <listitem>
                <para>Codification requests from a contractor</para>
            </listitem>
            <listitem>
                <para>Codification data to the contractor</para>
            </listitem>
        </itemizedlist>
        <para>This translates to eight distinct message types, all of which have a similar
            layout:</para>
        <itemizedlist>
            <listitem>
                <para>Header — basic identifier and status information</para>
            </listitem>
            <listitem>
                <para>Body — The IP data itself</para>
            </listitem>
            <listitem>
                <para>Trailer — sanity check information (number of segments, basic
                    identifier)</para>
            </listitem>
        </itemizedlist>
        <para>The data is kept in <emphasis>segments</emphasis> and <emphasis>data units</emphasis>.
            The segments are containers for types of information and contain data units, which are
            basically a key-value construct with a name (<quote>TEI</quote> or <quote>Text Element
                Identifier</quote>) and a value (<quote>data element</quote>). The value or data
            element can be a composite, containing two or more component data elements.</para>
        <para>The spec also explains how to group those messages into larger transmissions, plus a
            host of other subjects including how the Telex specification will work with S2000M, but
            I leave those parts to the reader to find out about.</para>
        <section>
            <title>Segments</title>
            <para>Segments names are called <quote>tags</quote>, a term that obviously means
                something else today<footnote>
                    <para>And did back then; I don't think the working group cared.</para>
                </footnote>.</para>
            <para>A segment looks like this:</para>
            <programlisting>SEG+ABC:123+DEF:456'</programlisting>
            <para>This segment, <code>SEG</code> (a <emphasis>tag</emphasis> name, if you insist),
                has two data units, <code>ABC</code> and <code>DEF</code>. The segment tag and each
                data unit are separated using <code>+</code> characters. The segment is ended using
                an apostrophe (<code>'</code>).</para>
        </section>
        <section>
            <title>Data Units</title>
            <para>Data units are key-value pairs separated with colons (<code>:</code>). The key,
                known as <emphasis>TEI</emphasis>, is before that colon while the value (<quote>data
                    element</quote>) follows after.</para>
            <para>Each segment <emphasis>tag</emphasis> and TEI is always identified using
                    <emphasis>three upper-case letters</emphasis>. This is always the case; S2000M
                only ever uses 3 upper-case letters for segment and TEI identification<footnote>
                    <para>Remember what I mentioned above, about saving that precious computing
                        power?</para>
                </footnote>.</para>
            <para>A data element may be a composite value, where several component values are
                associated with a single TEI:</para>
            <programlisting>ABC:12345:AB12:345</programlisting>
            <para>The TEI <code>ABC</code> has three components with values <quote>12345</quote>,
                    <quote>AB12</quote>, and <quote>345</quote>, respectively.</para>
            <para>The specification lists a number of composite data elements, with each component
                having a very specific meaning. The spec spells out each component with a name, a
                    <emphasis>lower-case</emphasis> TEI, never repeated in the message. For example,
                we might say that the data unit with the TEI <code>ABC</code> is a composite with
                components <code>def</code> and <code>ghi</code>, but the actual message would
                include the <code>ABC</code> data unit as <code>ANC:123:456</code>, with
                    <code>def</code> having the value <quote>123</quote> and <code>ghi</code> having
                the value <quote>456</quote>. In the format, the context is everything; we know that
                    <code>ABC</code> contains two components, <code>def</code> and
                    <emphasis>ghi</emphasis>; there is no ambiguity.</para>
            <para>The definitions of those basic character (sets) are similarly narrow. For example,
                we only get upper-case letters, and beyond the numerical characters we only get a
                handful of characters, such as equal signs, spaces, question marks, and the
                like.</para>
        </section>
        <section>
            <title>Data Typing</title>
            <para>Each data element — the value — is typed and meant to be usable in systems
                conceived long before Bill Gates thought 512 k was all it took. The typing lists not
                only the character sets allowed<footnote>
                    <para>And I use the phrase liberally.</para>
                </footnote> but also the number of characters allowed. The specification is full of
                constructs like this:</para>
            <programlisting>an..14</programlisting>
            <para>This means between 0 and 14 alphanumeric characters. But the spec also lists
                things like <code>n..2</code> (0–2 numerical characters) and <code>a2</code>
                (exactly two alphabetic characters)<footnote>
                    <para>Yes, you really do get the feeling that space was at a premium.</para>
                </footnote>. Everything is well defined, but as narrowly as possible.</para>
        </section>
        <section>
            <title>Message Structures</title>
            <para>The specification, rather helpfully, includes diagrams outlining the eight message
                types. <xref xmlns:xlink="http://www.w3.org/1999/xlink"
                    linkend="fig-csnipd-segments"/>, for example, outlines the segments in a
                    <emphasis>CSNIPD</emphasis> message.</para>
            <figure xml:id="fig-csnipd-segments">
                <title>CSNIPD Message Segments</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="img/Bal2024nord012801.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <para>The specification also details the message itself (see ), with the data units in
                the segments.</para>
            <figure xml:id="csnipd-structure">
                <title>CSNIPD Message Structure</title>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="img/Bal2024nord012802.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
            <para>This is only half of the story; there is a second diagram detailing the CSNIPD
                message in the spec.</para>
            <para>Here, the segments are three-letter codes all but <code>IPH</code> ending with
                    <quote>S</quote>, while the contained data units use the full data unit names
                rather than the TEI three-letter abbreviations.</para>
        </section>
        <section>
            <title>An Example</title>
            <para>I'm sure you're dying to see an actual message example. Here's a
                    <emphasis>CSNIPD</emphasis> message fragment from the spec:</para>
            <programlisting>UNH+...'
IPH+IPP:F61170026+MTP:CSNIPD+ISS:D1+TOD:F6117+ADD:D1234+FID:
S+MOI:1X+DRS:004+DRD:201088+LGE:UK+IPS:LANDING GEAR ASSY'
VAS+CHG:N+SID:F6117:A11K400000'
OHS+OSN:1+OBS:**PAM PROPOSED FROM 150189 TO 200189'
CAS+CHG:N+CSN:32000001 000 +ISN:00A+IND:1+RFS:0+QNA:1+TQL:
1+PNR:A11K400000+MFC:F6117+NSN:1620'
CES+CHG:N+SRV:GYL+SMR:XBDDD'
CES+CHG:N+SRV:FRA+SMR:XBDDD'
CAS+CHG:N+CSN:32000001 001 +ISN:00A+IND:2+RFS:0+QNA:1+TQL:
1+PNR:A11B410100+MFC:F6117'
CBS+RTX:32100001 000 00A'
CES+CHG:N+SRV....'
.
.
.
CAS+CHG:N+CSN:32100001 000 +ISN:00A+IND:1+RFS:0+..... +PNR:
A11B410100+MFC:F6117'
.
.
.
CAS+CHG:N+CSN:32100002 025 +ISN:00A+IND:2+RES:1+QNA:2+....
PNR:31599BC060LE+MFC:F6117'
CBS+ASP:1'
CES+CHG:N+SRV:GYL+SMR:PAOZZ +RMQ:10+ROQ:5'
CES+CHG:N+SRV:FRA +SMR:PAOZZ +RMQ:20+ROQ:0'
.
.
.
CAS+CHG:N+CSN:32100002 036 +ISN:00A+IND:2+RFS:1+QNA:2+...
PNR:31599BC060LE+MFC:F6117+NSN:1480:'
PAS+CHG:N+PNR:A11K400000+MFC:F6117+DFP:LANDING GEAR ASSEMBLY'
.
.
PAS+CHG:N+PNR:A11B410100+MFC:.....'
.
PAS+CHG:N+PNR:31599BC060LE+MFC:F6117+DFP:WASHER+INC:13393'
PBS+UOI:EA+SPQ:100+TOP:06+CML:1+SPC:1+PLT:3+STR:0+SLC:
0+PLC:A+PCD:A'
PDS+UPR:300+CUR:FRF'
.
.
UNT+....'</programlisting>
            <para>The headers and trailers are without consequence; the data is mostly in
                    <code>CAS</code> and <code>PAS</code> segments (and their subsegments<footnote>
                    <para>My term; these are segments that I consider to be within <code>CAS</code>
                        and <code>PAS</code>, respectively. There is a very clear grouping and
                        nesting of components within segments in the spec, but you can also argue
                        that there is overlap rather than hierarchy.</para>
                </footnote>). The message syntax itself is a series of flat segments and there is
                nothing in the format itself to suggest more structure. The above is also far from
                complete; more <code>CAS</code> and <code>PAS</code> segments are involved<footnote>
                    <para>The two segments depend on one another, which again is not something
                        apparent in the format itself.</para>
                </footnote>.</para>
        </section>
    </section>
    <section>
        <title>Forcing a Change</title>
        <para>The industry is traditionally slow to change, having to keep all those planes in the
            air while being subject to strict regulations. Frequently, change is forced rather than
            planned, from software no longer being supported to, well, tearing down the building in
            which a mainframe computer lives<footnote>
                <para>You could say that the building and the mainframe are a single unit; it's not
                    obvious which is built into which. The one joke the client is really tired of
                    hearing is <quote>So, how much do these things weigh? Maybe we could all pitch
                        in?</quote></para>
            </footnote>.</para>
        <para>This paper happened because of the latter. At the time of this writing, the mainframe
            has a few more months to live, and the migration into new systems and software
                <emphasis>must</emphasis> be complete by then. There are any number of problems to
            solve, data to migrate, and processes to replace, and while the approach is to introduce
            a drop-in replacement for the mainframe — to keep the inputs and outputs as close to the
            current architecture as possible — the project is still an absolutely massive
            undertaking.</para>
        <para>My role in the project is to make sure that it remains possible to store, process, and
            send across illustrated parts data to every system that currently depends on the
            mainframe once that mainframe is decommissioned<footnote>
                <para>There are a number of other potential subjects for Balisage papers there.
                    Alas, there is no time.</para>
            </footnote>. Here, it must be noted that currently, the actual Illustrated Parts
            Catalogues are all produced by either proprietary software converting text-based
            mainframe output to SGML or XML, or by third parties doing the same, again from various
            text-based mainframe outputs.</para>
        <para>A critical process involves exchanging IPD messages between the client and their
            partners and customers. The data exchange system and processes were first introduced
            when the client became involved in a multinational aerospace project. The decision was
            made to use S2000M, and an implementation was developed for the mainframe system,
            already 20 years old by then.</para>
        <para>You might think that this would be a great opportunity to move to the latest version
            of the specification, Issue 7.0, and I would agree, in principle. However, the many
            partners and customers currently do expect S2000M 2.1 and asking them to upgrade is
            currently not a viable option. </para>
        <para>We could also move to 7.0 but convert to and from 2.1 for the back-and-forth exchange,
            every time. This introduces several other problems, most importantly that the spec is
            not backwards-compatible to that extent, and certainly not between the very oldest and
            the very newest issues. Not a viable option either, then.</para>
        <section>
            <title>Sticking with Issue 2.1</title>
            <para>The mainframe S2000M implementation is lacking in several respects. There's not
                enough processing power and concurrent users are not really a thing; you have to
                book time on it, and an entire day is blocked every week for various batch processes
                that can't be done during night-time. Authoring and receiving messages is very much
                a manual process, involving a series of cryptically named, tiny text-based
                    <quote>screens</quote> where you type in equally cryptic commands or read
                incoming messages by flipping through multiple screens. It's not what you might call
                an <quote>intuitive</quote> UI.</para>
            <para>As the S2000M messaging was implemented on top of an upgrade of an earlier system,
                there are any number of legacy screens and internal logic that are not always fully
                documented or even understood<footnote>
                    <para>Many of the original engineers are no longer able to provide
                        assistance.</para>
                </footnote>. Also, as another consequence of the implementation on top of an
                upgrade, the S2000M segments and data units do not use S2000M naming; instead, they
                use existing database field names.</para>
            <para>It probably goes without saying that we don't actually want to replicate the
                mainframe inputs and outputs exactly. For example, there's no need to copy the many
                screens to author or present a message, nor is it necessary to keep the downstream
                systems that translate between the mainframe S2000M flavour and the
                    <quote>proper</quote> S2000M format. We should be able to handle S2000M
                as-is.</para>
            <para>But S2000M Issue 2.1 is not widely implemented. You can't buy an off-the-shelf
                product, and there is no open-source library available on Github. If you need it,
                you need to implement it yourself. At the same time, the client now accepts that the
                old specifications do need to be upgraded, eventually. The intention is to start
                using the entire S-series of specifications and start authoring directly in XML in
                the new system that will eventually include a CSDB<footnote>
                    <para>Common Source Database, an S1000D term for what is essentially a
                        specialised CMS and publishing platform for S1000D content.</para>
                </footnote>. It makes sense, then, to plan for upgrading S2000M as well. Just not
                now.</para>
            <para>But do we actually want to implement a 30-year old text-based specification,
                especially if it's going to go away soon?</para>
        </section>
    </section>
    <section>
        <title>iXML to the Rescue</title>
        <para>For the longest time, I thought of iXML [<xref
                xmlns:xlink="http://www.w3.org/1999/xlink" linkend="ixml-spec"/>] as a very cool but
            maybe not all that useful idea. How wrong I was! Invisible XML [<xref
                xmlns:xlink="http://www.w3.org/1999/xlink" linkend="ixml-webpage"/>] <quote>is a
                language for describing the implicit structure of data, and a set of technologies
                for making that structure explicit as XML markup</quote>. The idea is that given an
            implicit structure (dates are often provided as examples), it is possible to express
            that structure as an iXML grammar and then use the grammar and an iXML application to
            serialise an instance using the grammar in XML format, with explicit structures.</para>
        <section>
            <title>A Simple Example</title>
            <para>This is not the place to walk you through iXML — the Invisible XML home on the web
                    [<xref xmlns:xlink="http://www.w3.org/1999/xlink" linkend="ixml-webpage"/>]
                links to several tutorials, so start there — but let me give you an example<footnote>
                    <para>And I'm sure you can see where this is going.</para>
                </footnote>. Given this implicit structure:</para>
            <programlisting>SEG+ABC:123+DEF:456'</programlisting>
            <para>And this grammar:</para>
            <programlisting>SEG = -"SEG", sep, ABC, sep, DEF, segend .
-sep = -"+" .
-segend = -"'", (#9 | #a0 | #a | #d)* .
-comp-sep = -":" .
-num = [N] .
-n3 = num, num, num .
ABC = -"ABC", comp-sep, n3 .
DEF = -"DEF", comp-sep, n3 .</programlisting>
            <para>We get this XML:</para>
            <programlisting language="xml">&lt;SEG>
   &lt;ABC>123&lt;/ABC>
   &lt;DEF>456&lt;/DEF>
&lt;/SEG></programlisting>
            <para>But don't take my word for it. John Lumley's implemented an iXML processor running
                under Saxon JS [<xref xmlns:xlink="http://www.w3.org/1999/xlink"
                    linkend="lumley-ixml-processor"/>] that allows you to test the above in the
                browser.</para>
        </section>
        <section xml:id="grammar-considerations">
            <title>S2000M Grammar Considerations</title>
            <para>It turns out that while expressing the S2000M message formats as iXML grammars is
                a lot of work, it's perfectly doable. Here's a made-up S2000M
                    <emphasis>CSNIPD</emphasis> (<quote>used for the transmission of IP data which
                    has been compiled in accordance with the CSN-orientated IP procedure</quote>)
                example:</para>
            <programlisting>UNH+123456+CD3456:EF1:FD3:C1:ABC123+1234567890ABCDEFGHIJ012345678912345+12:C'
IPH+IPP:F61170026+MTP:CSNIPD+ISS:D1+TOD:F6117+ADD:D1234+FID:S+MOI:1X+DRS:004+DRD:201088+LGE:UK+IPS:LANDING GEAR ASSY+DRR:AB123456'
VAS+CHG:N+SID:12345:X1234999999999999+SNS:1234:123456789'
OHS+OSN:1+OBS:TESTING THIS'
CAS+CHG:B+CSN:0123456789123+ISN:ABC+IND:9+RFS:0+QNA:123+TQL:ABCDE+PNR:01234567890+MFC:QWERT+NSN:1234:123456789'
CBS+ASP:1+NIL:Q+RTX:1234567890123456+SMF:X+MFM:THIS IS TEXT+DFL:THIS IS MORE TEXT'
CCS+UCE:ABCDEFGH+UCA:123456+ICY:AB'
CDS+CTL:1234567+ESC:9+MAP:12+CSR:321'
CES+CHG:A+SRV:ABC+SMR:654321+RMQ:12345+ROQ:98765'
CJS+CHG:C+MOV:BA'
CKS+CHG:D+EFY:ABCDEFGH'
CFS+CHG:A+RFD:1234567'
CIS+CHG:B+ILS:09876543211234567890'
PAS+CHG:F+PNR:123456789123456789123456789+MFC:EDCBA+DFP:THIS IS A DFP TEXT+INC:12345+NSN:1234:123456789+RNC:7+RNV:5+RNJ:3'
PBS+UOI:AB+SPQ:0123+TOP:QW+ITY:ER+SPC:0+PLT:12+STR:9+SLC:X+PLC:Y+PCD:W'
PCS+UOM:AB+QUI:1234'
PDS+UPR:123456789012+CUR:ABC+MSQ:54321+PBD:1:2:3000:4:5:11111111'
PES+CRT:123+SRA:21+MTI:123456:AB+TBI:123456:CD+TSI:654321:BD+ALI:987654:XY+TLF:123'
PFS+DMC:ABC123+HAZ:ED12+PIC:8+FTC:X+PSC:Q+ESD:0+CMK:9'
PGS+SUU:AB345678901234+SPU:CD345678901234+WUU:AB34567+WPU:CD34567'
UNT+123456+ABCD1234567812'</programlisting>
            <para>Much of this won't make sense to you, but we can spot the basic constructs, namely
                segments —the rows starting with a three-letter alphabetic code followed by
                    <code>+</code> and ending with a segment end character (<code>'</code>). Within
                the segments, we can recognise data units, each separated with a plus
                    (<code>+</code>) and starting with a TEI (Text Element Identifier) followed by
                one or more values, each separated with colons ('<code>:</code>). The specification
                defines the allowed contents for each segment and their respective data units (see
                    <xref xmlns:xlink="http://www.w3.org/1999/xlink" linkend="csnipd-structure"/>
                for an overview), and so the remaining work is about expressing those contents in a
                formal grammar.</para>
            <!--TBA note minimum S2000M example requirements-->
            <para>Many segments are optional, as are many of the contained data units.
                    <emphasis>When</emphasis> they are optional depends on the type of information
                being carried across by the messages, so some segments will only appear depending of
                the item being described or if other segments are used.</para>
            <para><xref xmlns:xlink="http://www.w3.org/1999/xlink" linkend="csnipd-structure"/> may
                help illustrate this. The <code>CAS</code> segment provides mandatory
                location-related information about the item, but the <quote>C</quote> segments
                    <code>CBS</code>, <code>CCS</code>, <code>CDS</code> and <code>CFS</code> that
                follow are only provided depending on the nature of the item. Those segments are
                effectively <quote>subsegments</quote> to <code>CAS</code> and do not appear without
                it. S2000M does not define such a concept, but adding it to the iXML grammar has
                proved to be helpful.</para>
            <!--TBA update grammar below-->
            <programlisting>{
	This is an iXML grammar for S2000M CSNIPD messages.
	S2000M spec 2.1: https://www.s2000m.org/S2000M/S2000M%20Issue%202.1%20CP1-4.pdf
	iXML information: https://invisiblexml.org/

	Grammar tested with https://johnlumley.github.io/jwiXML.xhtml
}



CSNIPD = UNH, IPH, VAS+, OHS*, cas-group1+, pas-group2*, UNT .

cas-group1 = CAS, cas-subsegments? .
cas-subsegments = CBS?, CCS?, CDS?, ces-group3*, CFS?, CIS? .
ces-group3 = CES, ces-subsegments? .
ces-subsegments = cjs-group4* .
cjs-group4 = CJS, cjs-subsegments? .
cjs-subsegments = CKS* .

pas-group2 = PAS, pas-subsegments? .
pas-subsegments = PBS?, PCS?, PDS?, PES?, PFS?, PGS? .


@segend = -"'", (#9 | #a0 | #a | #d)* .
-sep = -"+" .
-comp-sep = -":" .

-alpha = [L] .
-num = [N] .
-other-level-a = [" !.,(;&amp;&lt;>%*=)"; #22] .
-an = (alpha | num | other-level-a) .

-num0-2 = (num? | num, num) .
-num0-6 = (...) .
-an0-2 = (an? | an, an) .
-an0-3 = (an? | an, an | an, an, an) .
-an0-5 = (...) .
-an0-6 = (...) .
-an0-7 = (...) .
-an0-8 = (...) .
-an0-14 = (...) .
-an0-16 = (...) .
-an0-19 = (...) .
-an0-20 = (...) .
-an0-32 = (...) .
-an0-35 = (...) .

no-segments-0074 = num0-6 .
msg-no-0062 = an0-14 .
msg-type-0065 = an0-6 .
msg-version-nbr-0052 = an0-3 .
msg-rel-nbr-0054 = an0-3 .
ctrl-agency-0051 = an0-2 .
assoc-assign-code-0057 = an0-6 .

message-identifier-S009 = msg-type-0065, comp-sep, msg-version-nbr-0052, comp-sep, msg-rel-nbr-0054, comp-sep, ctrl-agency-0051, comp-sep, assoc-assign-code-0057? .
common-access-ref-0068 = an0-35 .
sequence-transfers-0070 = num0-2 .

first-last-transfer-0073 = alpha . {C or F - should it be checked here?}
transfer-status-S010 = sequence-transfers-0070, comp-sep, first-last-transfer-0073 .

UNH = -"UNH", sep, msg-no-0062, sep, message-identifier-S009, sep, common-access-ref-0068, sep, transfer-status-S010, segend .
UNT = -"UNT", sep, no-segments-0074, sep, msg-no-0062, segend .

IPP = -"IPP", comp-sep, an, an, an, an, an, an, an, an, an .
MTP = -"MTP", comp-sep, an0-6 .
ISS = -"ISS", comp-sep, an, an .
TOD = -"TOD", comp-sep, an, an, an, an, an .
ADD = -"ADD", comp-sep, an, an, an, an, an .
FID = -"FID", comp-sep, alpha .
MOI = -"MOI", comp-sep, an, an .
DRS = -"DRS", comp-sep, num, num, num .
DRD = -"DRD", comp-sep, num, num, num, num, num, num .
LGE = -"LGE", comp-sep, alpha, alpha .
IPS = -"IPS", comp-sep, an0-19 .
DRR = "DRR", comp-sep, an, an, an, an, an, an, an, an .

IPH = -"IPH", sep, IPP, sep, MTP, (sep, ISS)?, sep, TOD, sep, ADD, sep, FID, sep, MOI, sep, DRS, sep, DRD, sep, LGE, sep, IPS, (sep, DRR)?, segend .

CHG = -"CHG", comp-sep, alpha .

mfc = an, an, an, an, an .
pnr = an0-32 .
SID = -"SID", comp-sep, mfc, comp-sep, pnr .

nsc = num, num, num, num .
nin = num, num, num, num, num, num, num, num, num .
SNS = -"SNS", (comp-sep, nsc)?, (comp-sep, nin)? .

VAS = -"VAS", sep, CHG, sep, SID, (sep, SNS)?, segend .

OSN = -"OSN", comp-sep, num .
OBS = -"OBS", comp-sep, an* . {This is 0-130 chars}

OHS = -"OHS", sep, OSN, sep, OBS, segend .

CSN = -"CSN", comp-sep, an, an, an, an, an, an, an, an, an, an, an, an, an .
ISN = -"ISN", comp-sep, an, an, an .
IND = -"IND", comp-sep, num .
RFS = -"RFS", comp-sep, num .
QNA = -"QNA", comp-sep, (an? | an, an | an, an, an | an, an, an, an) .
TQL = -"TQL", comp-sep, an0-5 .
PNR = -"PNR", comp-sep, -pnr .
MFC = -"MFC", comp-sep, -mfc .
NSN = -"NSN", comp-sep, nsc, (comp-sep, nin)? .

CAS = -"CAS", sep, CHG, sep, CSN, sep, ISN, (sep, IND)?, (sep, RFS)?, (sep, QNA)?, (sep, TQL)?, (sep, PNR)?, (sep, MFC)?, (sep, NSN)?, segend .

ASP = -"ASP", comp-sep, num .
NIL = -"NIL", comp-sep, an .
RTX = -"RTX", comp-sep, an0-16 .
SMF = -"SMF", comp-sep, alpha .
MFM = -"MFM", comp-sep, an* {0-40 alphanumeric chars} .
DFL = -"DFL", comp-sep, an* {0-130 alphanumeric chars} .

CBS = -"CBS", (sep, ASP)?, (sep, NIL)?, (sep, RTX)?, (sep, SMF)?, (sep, MFM)?, (sep, DFL)?, segend .

UCE = -"UCE", comp-sep, an, an, an, an, an, an, an, an .
UCA = -"UCA", comp-sep, an, an, an, an, an, an .
ICY = -"ICY", comp-sep, an, an .

CCS = -"CCS", (sep, UCE)?, (sep, UCA)?, (sep, ICY)?, segend .

CTL = -"CTL", comp-sep, an, an, an, an, an, an, an .
ESC = -"ESC", comp-sep, num .
MAP = -"MAP", comp-sep, num0-2 .
-num0-3 = (num? | num, num | num, num, num) .
CSR = -"CSR", comp-sep, num0-3 .

CDS = -"CDS", (sep, CTL)?, (sep, ESC)?, (sep, MAP)?, (sep, CSR)?, segend .

-num0-5 = (num? | num, num | num, num, num | num, num, num, num | num, num, num, num, num) .
SRV = -"SRV", comp-sep, (an? | an, an | an, an, an) .
SMR = -"SMR", comp-sep, an0-6 .
RMQ = -"RMQ", comp-sep, num0-5 .
ROQ = -"ROQ", comp-sep, num0-5 .

CES = -"CES", sep, CHG, sep, SRV, (sep, SMR)?, (sep, RMQ)?, (sep, ROQ)?, segend .

RFD = -"RFD", comp-sep, an0-7 .

CFS = -"CFS", sep, CHG, sep, RFD, segend .

ILS = -"ILS", comp-sep, an0-20 .

CIS = -"CIS", sep, CHG, sep, ILS, segend .

MOV = -"MOV", comp-sep, (an? | an, an) .

CJS = -"CJS", sep, CHG, sep, MOV, segend .

EFY = -"EFY", comp-sep, an0-8 .

CKS = -"CKS", sep, CHG, sep, EFY, segend .


DFP = -"DFP", comp-sep, an* {0-130 alphanumeric} .
INC = -"INC", comp-sep, an, an, an, an, an .
RNC = -"RNC", comp-sep, an .
RNV = -"RNV", comp-sep, num .
RNJ = -"RNJ", comp-sep, num .

PAS = -"PAS", sep, CHG, sep, PNR, sep, MFC, (sep, DFP)?, (sep, INC)?, (sep, NSN)?, (sep, RNC)?, (sep, RNV)?, (sep, RNJ)?, segend .

UOI = -"UOI", comp-sep, alpha, alpha .
SPQ = -"SPQ", comp-sep, (num? | num, num | num, num, num | num, num, num, num) .
TOP = -"TOP", comp-sep, an, an .
ITY = -"ITY", comp-sep, an, an .
SPC = -"SPC", comp-sep, num .
PLT = -"PLT", comp-sep, num0-2 .
STR = -"STR", comp-sep, num .
SLC = -"SLC", comp-sep, an .
PLC = -"PLC", comp-sep, an .
PCD = -"PCD", comp-sep, (an? | an, an) .

PBS = -"PBS", (sep, UOI)?, (sep, SPQ)?, (sep, TOP)?, (sep, ITY)?, (sep, SPC)?, (sep, PLT)?, (sep, STR)?, (sep, SLC)?, (sep, PLC)?, (sep, PCD)?, segend .

UOM = -"UOM", comp-sep, an, an .
QUI = -"QUI", comp-sep, (num? | num, num | num, num, num | num, num, num, num) .

PCS = -"PCS", (sep, UOM)?, (sep, QUI)?, segend .

-num0-12 = (...) .
UPR = -"UPR", comp-sep, num0-12 .
CUR = -"CUR", comp-sep, alpha, alpha, alpha .
MSQ = -"MSQ", comp-sep, num0-5 .

qty = num0-5 .
upr = num0-12 .

PBD = -"PBD", comp-sep, qty, comp-sep, qty, comp-sep, upr, (comp-sep, qty, comp-sep, qty, comp-sep, upr)* {0-2 repetitions} .

PDS = -"PDS", (sep, UPR)?, (sep, CUR)?, (sep, MSQ)?, (sep, PBD)?, segend .

CRT = -"CRT", comp-sep, num0-3 .
SRA = -"SRA", comp-sep, num0-2 .
-alpha0-2 = (alpha? | alpha, alpha) .
tbf = num0-6 .
tcm = alpha0-2 .
MTI = -"MTI", (comp-sep, tbf)?, (comp-sep, tcm)? .
tbo = num0-6 .
tco = alpha0-2 .
TBI = -"TBI", (comp-sep, tbo)?, (comp-sep, tco)? .
tsv = num0-6 .
tcs = alpha0-2 .
TSI = -"TSI", (comp-sep, tsv)?, (comp-sep, tcs)? .
aul = num0-6 .
tca = alpha0-2 .
ALI = -"ALI", (comp-sep, aul)?, (comp-sep, tca)? .
TLF = -"TLF", comp-sep, num0-3 .

PES = -"PES", (sep, CRT)?, (sep, SRA)?, (sep, MTI)?, (sep, TBI)?, (sep, TSI)?, (sep, ALI)?, (sep, TLF)?, segend .

DMC = -"DMC", comp-sep, an0-6 .

HAZ = -"HAZ", comp-sep, an, an, an, an .
PIC = -"PIC", comp-sep, num .
FTC = -"FTC", comp-sep, an .
PSC = -"PSC", comp-sep, an .
ESD = -"ESD", comp-sep, num .
CMK = -"CMK", comp-sep, num .

PFS = -"PFS", (sep, DMC)?, (sep, HAZ)?, (sep, PIC)?, (sep, FTC)?, (sep, PSC)?, (sep, ESD)?, (sep, CMK)?, segend .

-an14 = an, an, an, an, an, an, an, an, an, an, an, an, an, an .
SUU = -"SUU", comp-sep, an14 .
SPU = -"SPU", comp-sep, an14 .
-an7 = an, an, an, an, an, an, an .
WUU = -"WUU", comp-sep, an7 .
WPU = -"WPU", comp-sep, an7 .

PGS = -"PGS", (sep, SUU)?, (sep, SPU)?, (sep, WUU)?, (sep, WPU)?, segend .
</programlisting>
            <para>The XML serialisation is as follows:</para>
            <!--TBA update serialisation-->
            <!--TBA add grouping notes-->
            <programlisting>&lt;CSNIPD>
   &lt;UNH segend="&amp;#10;">
      &lt;msg-no-0062>123456&lt;/msg-no-0062>
      &lt;message-identifier-S009>
         &lt;msg-type-0065>CD3456&lt;/msg-type-0065>
         &lt;msg-version-nbr-0052>EF1&lt;/msg-version-nbr-0052>
         &lt;msg-rel-nbr-0054>FD3&lt;/msg-rel-nbr-0054>
         &lt;ctrl-agency-0051>C1&lt;/ctrl-agency-0051>
         &lt;assoc-assign-code-0057>ABC123&lt;/assoc-assign-code-0057>
      &lt;/message-identifier-S009>
      &lt;common-access-ref-0068>1234567890ABCDEFGHIJ012345678912345&lt;/common-access-ref-0068>
      &lt;transfer-status-S010>
         &lt;sequence-transfers-0070>12&lt;/sequence-transfers-0070>
         &lt;first-last-transfer-0073>C&lt;/first-last-transfer-0073>
      &lt;/transfer-status-S010>
   &lt;/UNH>
   &lt;IPH segend="&amp;#10;">
      &lt;IPP>F61170026&lt;/IPP>
      &lt;MTP>CSNIPD&lt;/MTP>
      &lt;ISS>D1&lt;/ISS>
      &lt;TOD>F6117&lt;/TOD>
      &lt;ADD>D1234&lt;/ADD>
      &lt;FID>S&lt;/FID>
      &lt;MOI>1X&lt;/MOI>
      &lt;DRS>004&lt;/DRS>
      &lt;DRD>201088&lt;/DRD>
      &lt;LGE>UK&lt;/LGE>
      &lt;IPS>LANDING GEAR ASSY&lt;/IPS>
      &lt;DRR>DRRAB123456&lt;/DRR>
   &lt;/IPH>
   &lt;VAS segend="&amp;#10;">
      &lt;CHG>N&lt;/CHG>
      &lt;SID>
         &lt;mfc>12345&lt;/mfc>
         &lt;pnr>X1234999999999999&lt;/pnr>
      &lt;/SID>
      &lt;SNS>
         &lt;nsc>1234&lt;/nsc>
         &lt;nin>123456789&lt;/nin>
      &lt;/SNS>
   &lt;/VAS>
   &lt;OHS segend="&amp;#10;">
      &lt;OSN>1&lt;/OSN>
      &lt;OBS>TESTING THIS&lt;/OBS>
   &lt;/OHS>
   &lt;cas-group1>
      &lt;CAS segend="&amp;#10;">
         &lt;CHG>B&lt;/CHG>
         &lt;CSN>0123456789123&lt;/CSN>
         &lt;ISN>ABC&lt;/ISN>
         &lt;IND>9&lt;/IND>
         &lt;RFS>0&lt;/RFS>
         &lt;QNA>123&lt;/QNA>
         &lt;TQL>ABCDE&lt;/TQL>
         &lt;PNR>01234567890&lt;/PNR>
         &lt;MFC>QWERT&lt;/MFC>
         &lt;NSN>
            &lt;nsc>1234&lt;/nsc>
            &lt;nin>123456789&lt;/nin>
         &lt;/NSN>
      &lt;/CAS>
      &lt;cas-subsegments>
         &lt;CBS segend="&amp;#10;">
            &lt;ASP>1&lt;/ASP>
            &lt;NIL>Q&lt;/NIL>
            &lt;RTX>1234567890123456&lt;/RTX>
            &lt;SMF>X&lt;/SMF>
            &lt;MFM>THIS IS TEXT&lt;/MFM>
            &lt;DFL>THIS IS MORE TEXT&lt;/DFL>
         &lt;/CBS>
         &lt;CCS segend="&amp;#10;">
            &lt;UCE>ABCDEFGH&lt;/UCE>
            &lt;UCA>123456&lt;/UCA>
            &lt;ICY>AB&lt;/ICY>
         &lt;/CCS>
         &lt;CDS segend="&amp;#10;">
            &lt;CTL>1234567&lt;/CTL>
            &lt;ESC>9&lt;/ESC>
            &lt;MAP>12&lt;/MAP>
            &lt;CSR>321&lt;/CSR>
         &lt;/CDS>
         &lt;ces-group3>
            &lt;CES segend="&amp;#10;">
               &lt;CHG>A&lt;/CHG>
               &lt;SRV>ABC&lt;/SRV>
               &lt;SMR>654321&lt;/SMR>
               &lt;RMQ>12345&lt;/RMQ>
               &lt;ROQ>98765&lt;/ROQ>
            &lt;/CES>
            &lt;ces-subsegments>
               &lt;cjs-group4>
                  &lt;CJS segend="&amp;#10;">
                     &lt;CHG>C&lt;/CHG>
                     &lt;MOV>BA&lt;/MOV>
                  &lt;/CJS>
                  &lt;cjs-subsegments>
                     &lt;CKS segend="&amp;#10;">
                        &lt;CHG>D&lt;/CHG>
                        &lt;EFY>ABCDEFGH&lt;/EFY>
                     &lt;/CKS>
                  &lt;/cjs-subsegments>
               &lt;/cjs-group4>
            &lt;/ces-subsegments>
         &lt;/ces-group3>
         &lt;CFS segend="&amp;#10;">
            &lt;CHG>A&lt;/CHG>
            &lt;RFD>1234567&lt;/RFD>
         &lt;/CFS>
         &lt;CIS segend="&amp;#10;">
            &lt;CHG>B&lt;/CHG>
            &lt;ILS>09876543211234567890&lt;/ILS>
         &lt;/CIS>
      &lt;/cas-subsegments>
   &lt;/cas-group1>
   &lt;pas-group2>
      &lt;PAS segend="&amp;#10;">
         &lt;CHG>F&lt;/CHG>
         &lt;PNR>123456789123456789123456789&lt;/PNR>
         &lt;MFC>EDCBA&lt;/MFC>
         &lt;DFP>THIS IS A DFP TEXT&lt;/DFP>
         &lt;INC>12345&lt;/INC>
         &lt;NSN>
            &lt;nsc>1234&lt;/nsc>
            &lt;nin>123456789&lt;/nin>
         &lt;/NSN>
         &lt;RNC>7&lt;/RNC>
         &lt;RNV>5&lt;/RNV>
         &lt;RNJ>3&lt;/RNJ>
      &lt;/PAS>
      &lt;pas-subsegments>
         &lt;PBS segend="&amp;#10;">
            &lt;UOI>AB&lt;/UOI>
            &lt;SPQ>0123&lt;/SPQ>
            &lt;TOP>QW&lt;/TOP>
            &lt;ITY>ER&lt;/ITY>
            &lt;SPC>0&lt;/SPC>
            &lt;PLT>12&lt;/PLT>
            &lt;STR>9&lt;/STR>
            &lt;SLC>X&lt;/SLC>
            &lt;PLC>Y&lt;/PLC>
            &lt;PCD>W&lt;/PCD>
         &lt;/PBS>
         &lt;PCS segend="&amp;#10;">
            &lt;UOM>AB&lt;/UOM>
            &lt;QUI>1234&lt;/QUI>
         &lt;/PCS>
         &lt;PDS segend="&amp;#10;">
            &lt;UPR>123456789012&lt;/UPR>
            &lt;CUR>ABC&lt;/CUR>
            &lt;MSQ>54321&lt;/MSQ>
            &lt;PBD>
               &lt;qty>1&lt;/qty>
               &lt;qty>2&lt;/qty>
               &lt;upr>3000&lt;/upr>
               &lt;qty>4&lt;/qty>
               &lt;qty>5&lt;/qty>
               &lt;upr>11111111&lt;/upr>
            &lt;/PBD>
         &lt;/PDS>
         &lt;PES segend="&amp;#10;">
            &lt;CRT>123&lt;/CRT>
            &lt;SRA>21&lt;/SRA>
            &lt;MTI>
               &lt;tbf>123456&lt;/tbf>
               &lt;tcm>AB&lt;/tcm>
            &lt;/MTI>
            &lt;TBI>
               &lt;tbo>123456&lt;/tbo>
               &lt;tco>CD&lt;/tco>
            &lt;/TBI>
            &lt;TSI>
               &lt;tsv>654321&lt;/tsv>
               &lt;tcs>BD&lt;/tcs>
            &lt;/TSI>
            &lt;ALI>
               &lt;aul>987654&lt;/aul>
               &lt;tca>XY&lt;/tca>
            &lt;/ALI>
            &lt;TLF>123&lt;/TLF>
         &lt;/PES>
         &lt;PFS segend="&amp;#10;">
            &lt;DMC>ABC123&lt;/DMC>
            &lt;HAZ>ED12&lt;/HAZ>
            &lt;PIC>8&lt;/PIC>
            &lt;FTC>X&lt;/FTC>
            &lt;PSC>Q&lt;/PSC>
            &lt;ESD>0&lt;/ESD>
            &lt;CMK>9&lt;/CMK>
         &lt;/PFS>
         &lt;PGS segend="&amp;#10;">
            &lt;SUU>AB345678901234&lt;/SUU>
            &lt;SPU>CD345678901234&lt;/SPU>
            &lt;WUU>AB34567&lt;/WUU>
            &lt;WPU>CD34567&lt;/WPU>
         &lt;/PGS>
      &lt;/pas-subsegments>
   &lt;/pas-group2>
   &lt;UNT segend="">
      &lt;no-segments-0074>123456&lt;/no-segments-0074>
      &lt;msg-no-0062>ABCD1234567812&lt;/msg-no-0062>
   &lt;/UNT>
&lt;/CSNIPD></programlisting>
            <para>Notable in the XML are a few handy tweaks. For example, every segment — remember
                the constructs starting with a segment name (<quote>tag</quote>) and ending with an
                apostrophe? — has a <code>@segend</code> attribute, making it easy to differentiate
                between segments and data units<footnote>
                    <para>No, the attribute value is of no interest whatsoever. The existence of the
                        attribute iself is enough.</para>
                </footnote>. A composite data unit's components are named and, just as declared in
                the specification, use lower-case letters. I've also added the notion of
                subsegments,  and there is grouping based on the multiple <quote>groups</quote>
                described by the spec.</para>
            <para>All this becomes useful later, when publising the XML in S2000M format (see <xref
                    xmlns:xlink="http://www.w3.org/1999/xlink" linkend="sect-input-output"
                />).</para>
            <section>
                <title>Lengthy Productions</title>
                <para>You'll notice in the above grammar that I've edited some of the productions to
                    only contain <code>...</code> rather than the full model. The problem is that if
                    I am to express a model such as 0 to 3 numeric characters, the iXML grammar
                    rules will have me do this (here, <code>n</code> represents a production
                    defining a single digit):</para>
                <programlisting>n0-3 = (n? | n, n | n, n, n ) .</programlisting>
                <para>A production defining a range between 0 and 130 numerical characters will be
                    quite a bit longer<footnote>
                        <para>The specification specifies a number of different ranges for some of
                            the many data units.</para>
                    </footnote>. Obviously, you can define a production using something like exactly
                    10 characters and then repeat that production where you need it:</para>
                <programlisting>n10 = n, n, n, n, n, n, n, n, n, n .</programlisting>
                <para>The result will still be a fair number of lengthy productions.</para>
            </section>
            <section>
                <title>Syntactic Sugar</title>
                <para>You'll notice that some productions begin with a <code>-</code> sign:</para>
                <programlisting>-an0-2 = (an? | an, an) .</programlisting>
                <para>Others include a <code>-</code> sign before a literal string (<code>CHG</code>
                    within quotes, right after the equal sign):</para>
                <programlisting>CHG = -"CHG", comp-sep, alpha .</programlisting>
                <para>This means that the XML serialisations should not output the production or
                    literal as elements.</para>
            </section>
            <section>
                <title>Data Types</title>
                <para>Studying the S2000M 2.1 specification, it becomes obvious that memory is
                    precious. If a data element only requires a single character, that is what you
                    get. A textual data element might contain up to 130 characters, which is rather
                    excessive for the specification; much more common is either a range up to no
                    more than 6 or a fixed length of no more than what is absolutely
                    necessary.</para>
                <para>The allowed character sets are very limited, too, allowing only for digits,
                    the upper-case English alphabet, spaces, question marks, and a few
                    others:</para>
                <programlisting>-alpha = [L] .
-num = [N] .
-other-level-a = [" !.,(;&amp;&lt;>%*=)"; #22] .
-an = (alpha | num | other-level-a) .</programlisting>
                <para>Here, <code>alpha</code> is more permissive than S2000 M; more correct is
                    probably <code>[Lu]</code> (the Unicode character class for uppercase letters
                    only).</para>
                <para>Some characters in S2000M are restricted, as they represent control
                    characters: apostrophes, plus signs, colons and question marks. Question marks
                    are <quote>release characters</quote> (<quote>escape characters</quote> in
                    today's parlance).</para>
            </section>
        </section>
        <section>
            <title>So, Now That I've Got the XML...</title>
            <para>...what do I do with it?</para>
            <para>Well, XML, unlike S2000M Issue 2.1, has a full ecosystem with editors,
                transformation languages, etc. To start with, can we author messages using the XML
                format?</para>
            <section>
                <title>Validation</title>
                <para>The XML serialisation of a formal grammar is expressible as a schema. Or, in
                    my case, a DTD. The dependencies between the various segments aren't, but
                    Schematron rules will suffice more often than not. For example, there is a
                    requirement in the spec that a message number given in the message header
                        (<code>UNH</code>) is repeated in the message trailer (<code>UNT</code>).
                    Looking at the grammar, above we find the <code>msg.no</code> production in
                    both:</para>
                <programlisting>UNH = -"UNH", sep, msg-no-0062, sep, message-identifier-S009, sep, segend .
UNT = -"UNT", sep, no-segments-0074, sep, msg-no-0062, segend .</programlisting>
                <para>It is easy to check this. Here's the header:</para>
                <programlisting>&lt;UNH segend="&amp;#10;">
    &lt;msg-no-0062>123456&lt;/msg-no-0062>
    ...
&lt;/UNH></programlisting>
                <para>And here's the trailer:</para>
                <programlisting>&lt;UNT segend="">
    ...
    &lt;msg-no-0062>ABCD1234567812&lt;/msg-no-0062>
&lt;/UNT></programlisting>
                <para>It's quite easy to create a Schematron rule that checks if the two message
                    identifiers (<code>msg-type-0062</code>) are the same. In this case, they are
                    not, meaning that the test should fail.</para>
                <para>But similarly, a Schematron check allows us to check the number of allowed
                    characters. For example, rather than using an iXML grammar-provided (and
                    lengthy) production declaring a model from 0 to 130 alphanumeric characters, we
                    can do that check in a Schematron rule.</para>
                <para>A combination of DTD validation and Schematron rules can express most, if not all<footnote>
                        <para>For example, neither a DTD, nor a Schematron, can express the S2000M
                            segment dependencies, such as the <code>CBS</code> segment only
                            appearing depending on the nature of the item given location-related
                            information in the preceding <code>CAS</code> segment. The grammar
                            itself does not address the machanics of such dependencies, only that
                            they exist.</para>
                    </footnote>, rules expressed either directly or indirectly in the S2000M
                    specification.</para>
            </section>
            <section xml:id="sect-schemas-authoring">
                <title>Schemas and Authoring</title>
                <para>The serialised XML resulting from the grammar and the various S2000M message
                    examples were used to generate a basic DTD. XML Schemas were considered, but I
                    like the simplicity of DTDs, and for anything beyond basic modelling, we need to
                    use Schematron rules anyway<footnote>
                        <para>A case can be made for an XML-based schema, as an XML-based format is
                            an easier target.</para>
                    </footnote>.</para>
                <!--TBA shorten the following para-->
                <para>The Schematron rules are mainly for checking data types (numeric, upper-case
                    letters, some special characters, or a combination thereof; note that the
                    character sets are actually very small) and the number of characters allowed for
                    each S2000M data unit. Also, some conditions having to do with when some data
                    units are allowed are described in the spec itself. There are rules concerning
                    how many times segments can be repeated, and there are sanity checks for the
                    messages themselves, e.g. the message trailer repeats an identifier also found
                    in the header, there is a segment count, and so on.</para>
                <section>
                    <title>Generating the DTD</title>
                    <!--TBA: minimum iXML examples, minimum XML examples (both unrealistic), maximum XML examples-->
                    <para>Rather than writing the DTD by hand, I chose to generate it in oXygen XML
                        Editor by feeding it with a number of examples serialised as XML from S2000M
                        text messages, from the bare minimum to the maximum allowed. Most were not
                        realistic — the various combinations wouldn't make sense to a methods
                        engineer — but they did cover the many permutations allowed by the
                        specification, resulting in a DTD that expresses it reasonably well.</para>
                    <para>This works well if the S2000M iXML grammar only contains the actual
                        segments and data units defined in the specification, in other words, if the
                        S2000M message structure is expressible in a DTD. But is it, or rather, can
                        we express the various implicit structures in the specification as explicit
                        structures in a DTD? For example, I mention in <xref
                            xmlns:xlink="http://www.w3.org/1999/xlink"
                            linkend="grammar-considerations"/> that the various <quote>C</quote>
                        segments — <code>CAS</code>, <code>CBS</code>, <code>CCS</code>, etc — imply
                        a segments and subsegments hierarchy, something I chose to declare in my
                        grammar.</para>
                    <para>In practice, however, the explicit message syntax, as defined in the
                        specification, is flat. No such hierarchy is apparent in a message using
                        those segments:</para>
                    <programlisting>CAS+CHG:B+...+NSN:1234:123456789'
CBS+ASP:1+...+DFL:THIS IS MORE TEXT'
CCS+UCE:ABCDEFGH+UCA:123456+ICY:AB'</programlisting>
                    <para>In other words, we can choose to model this as fa hierarchy because it is
                        a useful and mostly correct interpretation:</para>
                    <programlisting>CAS
├── CBS
└── CCS</programlisting>
                    <para>TBA</para>
                    <para>This causes a problem, because anything not explicitly in the S2000M
                        syntax but present and optional in the grammar will cause ambiguity when an
                        S2000 message is serialised in XML. You get more than one possible XML
                        serialisation. </para>
                    <!--TBA add ambiguity example-->
                </section>
                <section>
                    <title>DTD Additional Modelling</title>
                    <para>TBA: <code>#FIXED</code> attributes etc (non-syntax modelling), groups
                        from S2000M diagram, subsegments convenience wrappers</para>
                    <para>I very quickly learned to not tweak the generated DTD until the grammar is
                        stable</para>
                </section>
                <section>
                    <title>Schematron Data Type Rules Generation</title>
                    <para>The segment data types — such as 0 to 32 alphanumeric characters — are
                        easier to express as Schematron rules, and it turned out that these could be
                        generated in their entirety. The customer had an Excel spreadsheet with
                        every segment and data unit listed alongside with the data types, so
                        generating the rules was a matter of writing an XSLT to process the
                        spreadsheet.</para>
                </section>
            </section>
            <section>
                <title>Context</title>
                <para>The messages do not happen in a vacuum but rather as part of other engineering
                    tasks. The product itself is commonly handled as a hierarchical tree known as a
                        <quote>build of materials</quote> or BOM. In that tree, the root is the
                    product, and the nodes are the parts and kits (groups of parts) that together
                    form the product. So when you, say, add a part, the part is a node in that tree,
                    and the various properties of that part — part number, quantity, etc — are
                    attached to the node as <quote>attributes</quote><footnote>
                        <para>Not necessarily in the XML sense of the word.</para>
                    </footnote>, metadata about the part.</para>
                <para>The node has an <quote>address</quote>, a location in the product. In the
                    aerospace industry, there are standardised aproaches for those locations. The
                    ATA 2200 specification, for example, places the various physical components of
                    an aeroplane in numbered chapters where the numbers exactly match specific
                    components. For example, 71 is power plant and 72 is engine. The chapters are
                    then divided into sections and the sections into subjects, and addressing an
                    assembly task might look like the example in <xref
                        xmlns:xlink="http://www.w3.org/1999/xlink" linkend="assy-task"/></para>
                <figure xml:id="assy-task">
                    <title>ATA Number for a Task</title>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="img/Bal2024nord012803.gif"/>
                        </imageobject>
                    </mediaobject>
                </figure>
                <para>S1000D has a similar approach, as parts of that specification was derived from
                    ATA. It, like S2000M, uses SNS (Standad Numbering System) to identify a
                    component's system, subsystem, sub-subsystem, down to an assembly or
                    unit.</para>
                <para>This is the context in which the S2000M messaging happens, the idea being that
                    the messages are directly <emphasis>about</emphasis> an assembly or unit, a node
                    in the BOM<footnote>
                        <para>I am but a humble pointy bracket professional, and there is much more
                            to engineering and spare part BOMs, but this is where the S-series
                            becomes powerful; the approach fits with that taken in
                            engineering.</para>
                    </footnote>.</para>
                <para>This paper is not the place to discuss the larger picture, however.</para>
            </section>
            <section xml:id="sect-input-output">
                <title>Input and Output</title>
                <para>Messaging is a two-way communication. You author messages, and you read
                    responses.</para>
                <para>The incoming messages are S2000M text messages and need to be fed through the
                    iXML processor to be serialised as XML. The XML can then be opened in an editor,
                    of course, but it can also be be published in some suitable format using an XSLT
                    conversion.</para>
                <para>The outgoing messages are authored in XML format (see <xref
                        xmlns:xlink="http://www.w3.org/1999/xlink" linkend="sect-schemas-authoring"
                    />) but in order for the receiver to process them, the XML needs to be converted
                    to an S2000M text message. This requires no more than a few lines of XSLT —
                    which, of course, is expected. If we have a context-free iXML grammar for
                    S2000M, it follows that the resulting XML is a lossless representation of the same<footnote>
                        <para>An interesting exercise, outside the scope of this paper, is to prove
                            this.</para>
                    </footnote>, and it should therefore be possible to do a roundtrip.</para>
            </section>
            <section>
                <title>Reviews</title>
                <para>The lifecycle of an aerospace product means decades of updates, tweaks, and
                    fixes, all of which need to be thoroughly reviewed before a new version of the
                    product can fly. The data exchanges between manufacturers, partners, and others
                    reflect the work involved in those changes and form a <quote>paper trail</quote>
                    for later reviews.</para>
                <para>The mainframe messages for those updates used to be converted to an Excel
                    spreadsheet using a set of macros, but processing and storing the messages as
                    XML does away with the macros — we can easily convert the XML to Excel
                    spreadsheets, but also to any other suitable format for reviewing
                    purposes.</para>
            </section>
        </section>
    </section>
    <section>
        <title>In Conclusion</title>
        <para>This is very much an ongoing project. As I write this, I have a proof-of-concept
            solution with iXML grammars, a draft DTD and an accompanying Schematron, plus XSLT
            stylesheets to output the XML in various formats. The authoring environment is yet to
            follow, and there is much more work left to finalise the DTD and Schematron.</para>
        <para>The system that handles the BOMs is similarly a work in progress; it is being built
            around and in Siemens Teamcenter, a large software kit handling engineering data in any
            number of contexts and configurations.</para>
        <section>
            <title>Future State</title>
            <para>The current project is very much about replacing a mainframe that is scheduled to
                be decomissioned later this year. It does not attempt to replace or redesign any
                downstream system that can continue to function if we replicate the necessary data
                flows to and from the mainframe. What we are doing should be seen as a drop-in
                replacement for the mainframe.</para>
            <para>But that's an extremely inefficient way to move away from 60s technology, so there
                is also a <quote>future state</quote>, one where the various old downstream systems
                and text formats are replaced with IPD authoring directly in the system, using
                state-of-the-art software and up-to-date S-series specifications. And so, yes, the
                S2000M messaging iXML solution described in this paper will be replaced by Issue 7.x
                and up-to-date XML Schemas.</para>
            <para>The cool thing about this is that while moving to the latest issue is a big
                project, replacing the iXML-based authoring with 7.x is not. The basic functionality
                coupling the messages with the BOM will likely be reusable, even though some
                metadata will certainly change. If we replace an XML-based authoring approach with
                another, we are not starting from scratch. It's all authored in an XML editor and
                viewed and published using XML technologies, so much of that functionality and logic
                can stay. It will have to be updated, yes, but we don't need to throw everything
                away this time.</para>
            <para>The XML is here to stay.</para>
        </section>
    </section>
    <bibliography>
        <title>Bibliography</title>
        <bibliomixed xreflabel="S1000D Specifications" xml:id="s1000d-specs"><quote>S1000D
                Specifications</quote> [online, fetched on 3 April 2024] <link
                xmlns:xlink="http://www.w3.org/1999/xlink"
                xlink:href="https://users.s1000d.org/Default.aspx"/></bibliomixed>
        <bibliomixed xml:id="s2000m-2.1-spec"><quote>S2000M Issue 2.1</quote> [online, fetched on 3
            April 2024] <link
                xlink:href="https://www.s2000m.org/S2000M/S2000M%20Issue%202.1%20CP1-4.pdf"
                xmlns:xlink="http://www.w3.org/1999/xlink"/></bibliomixed>
        <bibliomixed xml:id="ixml-spec"><quote>Invisible XML Specification</quote> [online, fetched
            on 4 April] <link xmlns:xlink="http://www.w3.org/1999/xlink"
                xlink:href="https://invisiblexml.org/1.0/"/></bibliomixed>
        <bibliomixed xml:id="ixml-webpage"><quote>Invisible XML</quote> [online, fetched on 4 April
            2024] <link xmlns:xlink="http://www.w3.org/1999/xlink"
                xlink:href="https://invisiblexml.org/"/></bibliomixed>
        <bibliomixed xml:id="lumley-ixml-processor"><quote>jωiXML processor</quote> [online, fetched
            on 4 April 2024] <link xmlns:xlink="http://www.w3.org/1999/xlink"
                xlink:href="https://johnlumley.github.io/jwiXML.xhtml"/></bibliomixed>
    </bibliography>
</article>